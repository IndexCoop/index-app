generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This table is a partition table and requires additional setup for migrations. Visit https://pris.ly/d/partition-tables for more info.
model Trade {
  transactionHash      String
  userAddress          String
  chainId              Int?
  from                 String?
  to                   String?
  quoteType            String
  gasUnits             String
  gasPrice             String
  gasCost              String
  gasCostInUsd         Float
  priceImpact          Float?
  inputTokenAddress    String
  inputTokenSymbol     String
  inputTokenUnits      String
  inputTokenAmountWei  String
  inputTokenAmountUsd  Float
  inputTokenPriceUsd   Float
  outputTokenAddress   String
  outputTokenSymbol    String
  outputTokenUnits     String
  outputTokenAmountWei String
  outputTokenAmountUsd Float
  outputTokenPriceUsd  Float
  slippage             Float
  transactionType      String
  mintFee              String
  redeemFee            String
  refId                String?
  createdAt            DateTime   @db.Timestamptz(6)
  Referrals            Referrals? @relation(fields: [refId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "trade_referrals_fkey")
  User                 User       @relation(fields: [userAddress], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "trade_useraddress_fkey")

  @@id([transactionHash, createdAt], map: "trade_pkey")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  address                                String                                   @id
  last_connected                         DateTime?                                @db.Timestamptz(6)
  Trade                                  Trade[]
  UserLifetimePerformance                UserLifetimePerformance[]
  UserLifetimePerformanceMonthlySnapshot UserLifetimePerformanceMonthlySnapshot[]
}

model UserLifetimePerformance {
  userAddress              String
  tokenAddress             String
  tokenSymbol              String
  chainId                  Int
  totalSells               Int    @default(0)
  totalBuys                Int    @default(0)
  totalTrades              Int    @default(0)
  totalGasCostUsd          Float  @default(0)
  totalBoughtUsd           Float  @default(0)
  totalBoughtUnits         Float  @default(0)
  totalSoldUsd             Float  @default(0)
  totalSoldUnits           Float  @default(0)
  averageCostPerUnitUsd    Float?
  averageReturnPerUnitUsd  Float?
  averageSlippage          Float?
  totalRealizedGainLossUsd Float  @default(0)
  User                     User   @relation(fields: [userAddress], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "userlifetimeperformance_useraddress_fkey")

  @@id([userAddress, tokenAddress, chainId])
  @@index([tokenAddress], map: "idx_token_address")
  @@index([userAddress], map: "idx_user_address")
}

model ApiKey {
  key         String    @id
  refId       String
  permissions Json      @default("{}")
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  rateLimit   Int       @default(100)
  Referrals   Referrals @relation(fields: [refId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_refid")
}

model Referrals {
  id        String    @id
  name      String
  email     String?   @unique
  metadata  Json?
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @default(now()) @db.Timestamp(6)
  ApiKey    ApiKey[]
  Trade     Trade[]
}

model UserLifetimePerformanceMonthlySnapshot {
  snapshotDate                    DateTime @db.Date
  userAddress                     String
  tokenAddress                    String
  tokenSymbol                     String
  chainId                         Int
  monthlyTotalSells               Int      @default(0)
  monthlyTotalBuys                Int      @default(0)
  monthlyTotalTrades              Int      @default(0)
  monthlyTotalGasCostUsd          Float    @default(0)
  monthlyTotalBoughtUsd           Float    @default(0)
  monthlyTotalBoughtUnits         Float    @default(0)
  monthlyTotalSoldUsd             Float    @default(0)
  monthlyTotalSoldUnits           Float    @default(0)
  monthlyAverageCostPerUnitUsd    Float?
  monthlyAverageReturnPerUnitUsd  Float?
  monthlyAverageSlippage          Float?
  monthlyTotalRealizedGainLossUsd Float    @default(0)
  User                            User     @relation(fields: [userAddress], references: [address], onDelete: Cascade, onUpdate: NoAction, map: "userlifetimeperformancemonthlysnapshot_useraddress_fkey")

  @@id([snapshotDate, userAddress, tokenAddress, chainId])
}
