generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  address                     String                        @id @unique
  last_connected              DateTime?                     @db.Timestamptz(6)
  Transaction                 Trade[]
  UserAssetPerformanceMonthly UserAssetPerformanceMonthly[]
  UserLifetimePerformance     UserLifetimePerformance[]
}

model Trade {
  transactionHash               String
  userAddress                   String
  chainId                       Int?
  from                          String?
  to                            String?
  type                          String
  inputToken                    String
  outputToken                   String
  gas                           String
  gasPrice                      String
  gasCosts                      String
  gasCostsInUsd                 Float
  fullCostsInUsd                Float?
  priceImpact                   Float?
  indexTokenAmount              String
  inputOutputTokenAmount        String
  inputTokenAmount              String
  inputTokenAmountUsd           Float
  outputTokenAmount             String
  outputTokenAmountUsd          Float
  outputTokenAmountUsdAfterFees Float
  inputTokenPrice               Float
  outputTokenPrice              Float
  slippage                      Float
  createdAt                     DateTime @db.Timestamptz(6)
  isMint                        Boolean
  User                          User     @relation(fields: [userAddress], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "trade_useraddress_fkey")

  @@id([transactionHash, createdAt])
}

model UserAssetPerformanceMonthly {
  userAddress           String
  trackedToken          String
  month                 DateTime @db.Date
  totalTrades           Int
  totalFeesUsd          Float
  totalGasCostsUsd      Float
  totalCost             Float
  totalTokensBought     Float
  averageCostPerToken   Float
  totalReturn           Float
  totalTokensSold       Float
  averageReturnPerToken Float
  averageSlippage       Float
  totalRealizedGainLoss Float    @default(0)
  User                  User     @relation(fields: [userAddress], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "userassetperformancemonthly_useraddress_fkey")

  @@id([userAddress, trackedToken, month], map: "userassetperformancemonthly_pkey")
}

model UserLifetimePerformance {
  userAddress           String
  trackedToken          String
  totalTrades           Int    @default(0)
  totalFeesUsd          Float  @default(0)
  totalGasCostsUsd      Float  @default(0)
  totalCost             Float  @default(0)
  totalTokensBought     Float  @default(0)
  averageCostPerToken   Float?
  totalReturn           Float  @default(0)
  totalTokensSold       Float  @default(0)
  averageReturnPerToken Float?
  averageSlippage       Float?
  totalRealizedGainLoss Float  @default(0)
  User                  User   @relation(fields: [userAddress], references: [address], onDelete: NoAction, onUpdate: NoAction, map: "userlifetimeperformance_useraddress_fkey")

  @@id([userAddress, trackedToken])
}
